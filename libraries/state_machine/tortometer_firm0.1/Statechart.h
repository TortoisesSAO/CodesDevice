/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

/*!
Forward declaration for the Statechart state machine.
*/
class Statechart;


#include <deque>
#include "sc_types.h"
#include "sc_statemachine.h"

/*! \file
Header of the state machine 'Statechart'.
*/


#ifndef SCT_EVENTS_STATECHART_H
#define SCT_EVENTS_STATECHART_H
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif

namespace statechart_events
{
typedef enum  {
	invalid_event = SC_INVALID_EVENT_VALUE,
	battery_charge_completed,
	USB5V_connected,
	USB5V_NONconnected,
	battery_level_ok,
	battery_level_low,
	sd_check_ok,
	sd_check_NONok,
	gps_fixed_ok,
	gps_fixed_timeout,
	adq_check_battery
} StatechartEventName;

class SctEvent
{
	public:
		SctEvent(StatechartEventName name_) : name(name_){}
		virtual ~SctEvent(){}
		const StatechartEventName name;
		
};
		
template <typename T>
class TypedSctEvent : public SctEvent
{
	public:
		TypedSctEvent(StatechartEventName name_, T value_) :
			SctEvent(name_),
			value(value_)
			{}
		virtual ~TypedSctEvent(){}
		const T value;
};

class SctEvent__battery_charge_completed : public SctEvent
{
	public:
		SctEvent__battery_charge_completed(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__USB5V_connected : public SctEvent
{
	public:
		SctEvent__USB5V_connected(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__USB5V_NONconnected : public SctEvent
{
	public:
		SctEvent__USB5V_NONconnected(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__battery_level_ok : public SctEvent
{
	public:
		SctEvent__battery_level_ok(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__battery_level_low : public SctEvent
{
	public:
		SctEvent__battery_level_low(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__sd_check_ok : public SctEvent
{
	public:
		SctEvent__sd_check_ok(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__sd_check_NONok : public SctEvent
{
	public:
		SctEvent__sd_check_NONok(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__gps_fixed_ok : public SctEvent
{
	public:
		SctEvent__gps_fixed_ok(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__gps_fixed_timeout : public SctEvent
{
	public:
		SctEvent__gps_fixed_timeout(StatechartEventName name_) : SctEvent(name_){};
};
class SctEvent__adq_check_battery : public SctEvent
{
	public:
		SctEvent__adq_check_battery(StatechartEventName name_) : SctEvent(name_){};
};

}
#endif /* SCT_EVENTS_STATECHART_H */


/*! Define indices of states in the StateConfVector */
#define SCVI_SM_START 0
#define SCVI_SM_BAT_CHARGING 0
#define SCVI_SM_SD_CHECKING 0
#define SCVI_SM_GPS_WAIT_POS_FIX 0
#define SCVI_SM_SD_NONC0NNECTED 0
#define SCVI_SM_BAT_LOW 0
#define SCVI_SM_BAT_CHECK 0
#define SCVI_SM_SHUTDOWN 0
#define SCVI_SM_GPS_NONFIX 0
#define SCVI_SM__FINAL_ 0
#define SCVI_SM_ADQ_DATA 0
#define SCVI_SM_BAT_FULL 0


class Statechart : public sc::StatemachineInterface
{
	public:
		Statechart();
		
		virtual ~Statechart();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			Statechart_last_state,
			SM_START,
			SM_BAT_CHARGING,
			SM_SD_CHECKING,
			SM_GPS_WAIT_POS_FIX,
			SM_SD_NONC0NNECTED,
			SM_BAT_LOW,
			SM_BAT_CHECK,
			SM_SHUTDOWN,
			SM_GPS_NONFIX,
			SM__final_,
			SM_ADQ_DATA,
			SM_BAT_FULL
		} StatechartStates;
					
		static const sc_integer numStates = 12;
		
		
		/*! Raises the in event 'battery_charge_completed' that is defined in the default interface scope. */
		void raiseBattery_charge_completed();
		
		/*! Raises the in event 'USB5V_connected' that is defined in the default interface scope. */
		void raiseUSB5V_connected();
		
		/*! Raises the in event 'USB5V_NONconnected' that is defined in the default interface scope. */
		void raiseUSB5V_NONconnected();
		
		/*! Raises the in event 'battery_level_ok' that is defined in the default interface scope. */
		void raiseBattery_level_ok();
		
		/*! Raises the in event 'battery_level_low' that is defined in the default interface scope. */
		void raiseBattery_level_low();
		
		/*! Raises the in event 'sd_check_ok' that is defined in the default interface scope. */
		void raiseSd_check_ok();
		
		/*! Raises the in event 'sd_check_NONok' that is defined in the default interface scope. */
		void raiseSd_check_NONok();
		
		/*! Raises the in event 'gps_fixed_ok' that is defined in the default interface scope. */
		void raiseGps_fixed_ok();
		
		/*! Raises the in event 'gps_fixed_timeout' that is defined in the default interface scope. */
		void raiseGps_fixed_timeout();
		
		/*! Raises the in event 'adq_check_battery' that is defined in the default interface scope. */
		void raiseAdq_check_battery();
		
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent();
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void enter();
		
		virtual void exit();
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		sc_boolean check();
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(StatechartStates state) const;
		
		
		
	protected:
		
		
	private:
		
		/*! Raises the in event 'battery_charge_completed' that is defined in the default interface scope. */
		void internal_raiseBattery_charge_completed();
		sc_boolean battery_charge_completed_raised;
		/*! Raises the in event 'USB5V_connected' that is defined in the default interface scope. */
		void internal_raiseUSB5V_connected();
		sc_boolean USB5V_connected_raised;
		/*! Raises the in event 'USB5V_NONconnected' that is defined in the default interface scope. */
		void internal_raiseUSB5V_NONconnected();
		sc_boolean USB5V_NONconnected_raised;
		/*! Raises the in event 'battery_level_ok' that is defined in the default interface scope. */
		void internal_raiseBattery_level_ok();
		sc_boolean battery_level_ok_raised;
		/*! Raises the in event 'battery_level_low' that is defined in the default interface scope. */
		void internal_raiseBattery_level_low();
		sc_boolean battery_level_low_raised;
		/*! Raises the in event 'sd_check_ok' that is defined in the default interface scope. */
		void internal_raiseSd_check_ok();
		sc_boolean sd_check_ok_raised;
		/*! Raises the in event 'sd_check_NONok' that is defined in the default interface scope. */
		void internal_raiseSd_check_NONok();
		sc_boolean sd_check_NONok_raised;
		/*! Raises the in event 'gps_fixed_ok' that is defined in the default interface scope. */
		void internal_raiseGps_fixed_ok();
		sc_boolean gps_fixed_ok_raised;
		/*! Raises the in event 'gps_fixed_timeout' that is defined in the default interface scope. */
		void internal_raiseGps_fixed_timeout();
		sc_boolean gps_fixed_timeout_raised;
		/*! Raises the in event 'adq_check_battery' that is defined in the default interface scope. */
		void internal_raiseAdq_check_battery();
		sc_boolean adq_check_battery_raised;
		void iface_dispatch_event(statechart_events::SctEvent * event);
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		
		
		StatechartStates stateConfVector[maxOrthogonalStates];
		
		
		
		
		sc_boolean completed;
		sc_boolean doCompletion;
		sc_boolean isExecuting;
		
		
		// prototypes of all internal functions
		
		void enact_SM_SD_NONC0NNECTED();
		void enact_SM_BAT_LOW();
		void enact_SM_SHUTDOWN();
		void enact_SM_GPS_NONFIX();
		void enseq_SM_START_default();
		void enseq_SM_BAT_CHARGING_default();
		void enseq_SM_SD_CHECKING_default();
		void enseq_SM_GPS_WAIT_POS_FIX_default();
		void enseq_SM_SD_NONC0NNECTED_default();
		void enseq_SM_BAT_LOW_default();
		void enseq_SM_BAT_CHECK_default();
		void enseq_SM_GPS_NONFIX_default();
		void enseq_SM_ADQ_DATA_default();
		void enseq_SM_BAT_FULL_default();
		void enseq_SM_default();
		void exseq_SM_START();
		void exseq_SM_BAT_CHARGING();
		void exseq_SM_SD_CHECKING();
		void exseq_SM_GPS_WAIT_POS_FIX();
		void exseq_SM_SD_NONC0NNECTED();
		void exseq_SM_BAT_LOW();
		void exseq_SM_BAT_CHECK();
		void exseq_SM_SHUTDOWN();
		void exseq_SM_GPS_NONFIX();
		void exseq_SM__final_();
		void exseq_SM_ADQ_DATA();
		void exseq_SM_BAT_FULL();
		void exseq_SM();
		void react_SM__entry_Default();
		sc_integer react(const sc_integer transitioned_before);
		sc_integer SM_START_react(const sc_integer transitioned_before);
		sc_integer SM_BAT_CHARGING_react(const sc_integer transitioned_before);
		sc_integer SM_SD_CHECKING_react(const sc_integer transitioned_before);
		sc_integer SM_GPS_WAIT_POS_FIX_react(const sc_integer transitioned_before);
		sc_integer SM_SD_NONC0NNECTED_react(const sc_integer transitioned_before);
		sc_integer SM_BAT_LOW_react(const sc_integer transitioned_before);
		sc_integer SM_BAT_CHECK_react(const sc_integer transitioned_before);
		sc_integer SM_SHUTDOWN_react(const sc_integer transitioned_before);
		sc_integer SM_GPS_NONFIX_react(const sc_integer transitioned_before);
		sc_integer SM__final__react(const sc_integer transitioned_before);
		sc_integer SM_ADQ_DATA_react(const sc_integer transitioned_before);
		sc_integer SM_BAT_FULL_react(const sc_integer transitioned_before);
		void clearInEvents();
		void microStep();
		void runCycle();
		
		
		statechart_events::SctEvent* getNextEvent();
		void dispatch_event(statechart_events::SctEvent * event);
		std::deque<statechart_events::SctEvent*> inEventQueue;
		
		
};




#endif /* STATECHART_H_ */
