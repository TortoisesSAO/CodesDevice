/** Generated by YAKINDU Statechart Tools code generator. */

#include "Statechart.h"

/*! \file
Implementation of the state machine 'Statechart'
*/




Statechart::Statechart() :
	battery_charge_completed_raised(false),
	USB5V_connected_raised(false),
	USB5V_NONconnected_raised(false),
	battery_level_raised(false),
	battery_level_value(false),
	battery_level_ok_raised(false),
	battery_level_low_raised(false),
	battery_level_critical_raised(false),
	sd_check_ok_raised(false),
	sd_check_NOTok_raised(false),
	gps_fixed_ok_raised(false),
	gps_fixed_timeout_raised(false),
	end_system_raised(false),
	adq_check_battery_raised(false),
	isExecuting(false)
{
	for (sc_ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = Statechart_last_state;
	
	clearInEvents();
}

Statechart::~Statechart()
{
}


using namespace statechart_events;

SctEvent* Statechart::getNextEvent()
{
	SctEvent* nextEvent = 0;
	
	if(!inEventQueue.empty()) {
		nextEvent = inEventQueue.front();
		inEventQueue.pop_front();
	}
	
	return nextEvent;
}

void Statechart::dispatch_event(SctEvent * event)
{
	if(event == 0) {
		return;
	}
	switch(event->name)
	{
		case battery_charge_completed:
		case USB5V_connected:
		case USB5V_NONconnected:
		case battery_level:
		case battery_level_ok:
		case battery_level_low:
		case battery_level_critical:
		case sd_check_ok:
		case sd_check_NOTok:
		case gps_fixed_ok:
		case gps_fixed_timeout:
		case end_system:
		case adq_check_battery:
		{
			iface_dispatch_event(event);
			break;
		}
		default:
			/* do nothing */
			break;
	}
	delete event;
}

void Statechart::iface_dispatch_event(SctEvent * event)
{
	switch(event->name)
	{
		case battery_charge_completed:
		{
			internal_raiseBattery_charge_completed();
			break;
		}
		case USB5V_connected:
		{
			internal_raiseUSB5V_connected();
			break;
		}
		case USB5V_NONconnected:
		{
			internal_raiseUSB5V_NONconnected();
			break;
		}
		case battery_level:
		{
			SctEvent__battery_level * e = static_cast<SctEvent__battery_level*>(event);
			if(e != 0) {
				internal_raiseBattery_level(e->value);
			}
			break;
		}
		case battery_level_ok:
		{
			internal_raiseBattery_level_ok();
			break;
		}
		case battery_level_low:
		{
			internal_raiseBattery_level_low();
			break;
		}
		case battery_level_critical:
		{
			internal_raiseBattery_level_critical();
			break;
		}
		case sd_check_ok:
		{
			internal_raiseSd_check_ok();
			break;
		}
		case sd_check_NOTok:
		{
			internal_raiseSd_check_NOTok();
			break;
		}
		case gps_fixed_ok:
		{
			internal_raiseGps_fixed_ok();
			break;
		}
		case gps_fixed_timeout:
		{
			internal_raiseGps_fixed_timeout();
			break;
		}
		case end_system:
		{
			internal_raiseEnd_system();
			break;
		}
		case adq_check_battery:
		{
			internal_raiseAdq_check_battery();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}



sc_boolean Statechart::isActive() const
{
	return stateConfVector[0] != Statechart_last_state;
}

sc_boolean Statechart::isFinal() const
{
	return (stateConfVector[0] == SM__final_);
}

sc_boolean Statechart::check() {
	return true;
}


sc_boolean Statechart::isStateActive(StatechartStates state) const
{
	switch (state)
	{
		case SM_START :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_START] == SM_START);
			break;
		}
		case SM_BAT_CHARGING :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_BAT_CHARGING] == SM_BAT_CHARGING);
			break;
		}
		case SM_SD_CHECK :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_SD_CHECK] == SM_SD_CHECK);
			break;
		}
		case SM_GPS_WAIT_POS_FIX :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_GPS_WAIT_POS_FIX] == SM_GPS_WAIT_POS_FIX);
			break;
		}
		case SM_SD_NONC0NNECT :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_SD_NONC0NNECT] == SM_SD_NONC0NNECT);
			break;
		}
		case SM_BAT_LOW :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_BAT_LOW] == SM_BAT_LOW);
			break;
		}
		case SM_BAT_CHECK :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_BAT_CHECK] == SM_BAT_CHECK);
			break;
		}
		case SM_SHUTDOWN :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_SHUTDOWN] == SM_SHUTDOWN);
			break;
		}
		case SM_GPS_NONFIX :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_GPS_NONFIX] == SM_GPS_NONFIX);
			break;
		}
		case SM__final_ :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM__FINAL_] == SM__final_);
			break;
		}
		case SM_ADQ_DATA :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_ADQ_DATA] == SM_ADQ_DATA);
			break;
		}
		case SM_BAT_FULL :
		{
			return (sc_boolean) (stateConfVector[SCVI_SM_BAT_FULL] == SM_BAT_FULL);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

/* Functions for event battery_charge_completed in interface  */
void Statechart::raiseBattery_charge_completed()
{
	inEventQueue.push_back(new SctEvent__battery_charge_completed(battery_charge_completed));
        runCycle();
}
void Statechart::internal_raiseBattery_charge_completed()
{
	battery_charge_completed_raised = true;
}
/* Functions for event USB5V_connected in interface  */
void Statechart::raiseUSB5V_connected()
{
	inEventQueue.push_back(new SctEvent__USB5V_connected(USB5V_connected));
        runCycle();
}
void Statechart::internal_raiseUSB5V_connected()
{
	USB5V_connected_raised = true;
}
/* Functions for event USB5V_NONconnected in interface  */
void Statechart::raiseUSB5V_NONconnected()
{
	inEventQueue.push_back(new SctEvent__USB5V_NONconnected(USB5V_NONconnected));
        runCycle();
}
void Statechart::internal_raiseUSB5V_NONconnected()
{
	USB5V_NONconnected_raised = true;
}
/* Functions for event battery_level in interface  */
void Statechart::raiseBattery_level(sc_boolean battery_level_)
{
	inEventQueue.push_back(new SctEvent__battery_level(battery_level, battery_level_));
        runCycle();
}
void Statechart::internal_raiseBattery_level(sc_boolean battery_level_)
{
	battery_level_value = battery_level_;
	battery_level_raised = true;
}
/* Functions for event battery_level_ok in interface  */
void Statechart::raiseBattery_level_ok()
{
	inEventQueue.push_back(new SctEvent__battery_level_ok(battery_level_ok));
        runCycle();
}
void Statechart::internal_raiseBattery_level_ok()
{
	battery_level_ok_raised = true;
}
/* Functions for event battery_level_low in interface  */
void Statechart::raiseBattery_level_low()
{
	inEventQueue.push_back(new SctEvent__battery_level_low(battery_level_low));
        runCycle();
}
void Statechart::internal_raiseBattery_level_low()
{
	battery_level_low_raised = true;
}
/* Functions for event battery_level_critical in interface  */
void Statechart::raiseBattery_level_critical()
{
	inEventQueue.push_back(new SctEvent__battery_level_critical(battery_level_critical));
        runCycle();
}
void Statechart::internal_raiseBattery_level_critical()
{
	battery_level_critical_raised = true;
}
/* Functions for event sd_check_ok in interface  */
void Statechart::raiseSd_check_ok()
{
	inEventQueue.push_back(new SctEvent__sd_check_ok(sd_check_ok));
        runCycle();
}
void Statechart::internal_raiseSd_check_ok()
{
	sd_check_ok_raised = true;
}
/* Functions for event sd_check_NOTok in interface  */
void Statechart::raiseSd_check_NOTok()
{
	inEventQueue.push_back(new SctEvent__sd_check_NOTok(sd_check_NOTok));
        runCycle();
}
void Statechart::internal_raiseSd_check_NOTok()
{
	sd_check_NOTok_raised = true;
}
/* Functions for event gps_fixed_ok in interface  */
void Statechart::raiseGps_fixed_ok()
{
	inEventQueue.push_back(new SctEvent__gps_fixed_ok(gps_fixed_ok));
        runCycle();
}
void Statechart::internal_raiseGps_fixed_ok()
{
	gps_fixed_ok_raised = true;
}
/* Functions for event gps_fixed_timeout in interface  */
void Statechart::raiseGps_fixed_timeout()
{
	inEventQueue.push_back(new SctEvent__gps_fixed_timeout(gps_fixed_timeout));
        runCycle();
}
void Statechart::internal_raiseGps_fixed_timeout()
{
	gps_fixed_timeout_raised = true;
}
/* Functions for event end_system in interface  */
void Statechart::raiseEnd_system()
{
	inEventQueue.push_back(new SctEvent__end_system(end_system));
        runCycle();
}
void Statechart::internal_raiseEnd_system()
{
	end_system_raised = true;
}
/* Functions for event adq_check_battery in interface  */
void Statechart::raiseAdq_check_battery()
{
	inEventQueue.push_back(new SctEvent__adq_check_battery(adq_check_battery));
        runCycle();
}
void Statechart::internal_raiseAdq_check_battery()
{
	adq_check_battery_raised = true;
}

// implementations of all internal functions
/* 'default' enter sequence for state START */
void Statechart::enseq_SM_START_default()
{
	/* 'default' enter sequence for state START */
	stateConfVector[0] = SM_START;
}

/* 'default' enter sequence for state BAT_CHARGING */
void Statechart::enseq_SM_BAT_CHARGING_default()
{
	/* 'default' enter sequence for state BAT_CHARGING */
	stateConfVector[0] = SM_BAT_CHARGING;
}

/* 'default' enter sequence for state SD_CHECK */
void Statechart::enseq_SM_SD_CHECK_default()
{
	/* 'default' enter sequence for state SD_CHECK */
	stateConfVector[0] = SM_SD_CHECK;
}

/* 'default' enter sequence for state GPS_WAIT_POS_FIX */
void Statechart::enseq_SM_GPS_WAIT_POS_FIX_default()
{
	/* 'default' enter sequence for state GPS_WAIT_POS_FIX */
	stateConfVector[0] = SM_GPS_WAIT_POS_FIX;
}

/* 'default' enter sequence for state SD_NONC0NNECT */
void Statechart::enseq_SM_SD_NONC0NNECT_default()
{
	/* 'default' enter sequence for state SD_NONC0NNECT */
	stateConfVector[0] = SM_SD_NONC0NNECT;
}

/* 'default' enter sequence for state BAT_LOW */
void Statechart::enseq_SM_BAT_LOW_default()
{
	/* 'default' enter sequence for state BAT_LOW */
	stateConfVector[0] = SM_BAT_LOW;
}

/* 'default' enter sequence for state BAT_CHECK */
void Statechart::enseq_SM_BAT_CHECK_default()
{
	/* 'default' enter sequence for state BAT_CHECK */
	stateConfVector[0] = SM_BAT_CHECK;
}

/* 'default' enter sequence for state SHUTDOWN */
void Statechart::enseq_SM_SHUTDOWN_default()
{
	/* 'default' enter sequence for state SHUTDOWN */
	stateConfVector[0] = SM_SHUTDOWN;
}

/* 'default' enter sequence for state GPS_NONFIX */
void Statechart::enseq_SM_GPS_NONFIX_default()
{
	/* 'default' enter sequence for state GPS_NONFIX */
	stateConfVector[0] = SM_GPS_NONFIX;
}

/* Default enter sequence for final state */
void Statechart::enseq_SM__final__default()
{
	/* Default enter sequence for final state */
	stateConfVector[0] = SM__final_;
}

/* 'default' enter sequence for state ADQ_DATA */
void Statechart::enseq_SM_ADQ_DATA_default()
{
	/* 'default' enter sequence for state ADQ_DATA */
	stateConfVector[0] = SM_ADQ_DATA;
}

/* 'default' enter sequence for state BAT_FULL */
void Statechart::enseq_SM_BAT_FULL_default()
{
	/* 'default' enter sequence for state BAT_FULL */
	stateConfVector[0] = SM_BAT_FULL;
}

/* 'default' enter sequence for region SM */
void Statechart::enseq_SM_default()
{
	/* 'default' enter sequence for region SM */
	react_SM__entry_Default();
}

/* Default exit sequence for state START */
void Statechart::exseq_SM_START()
{
	/* Default exit sequence for state START */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state BAT_CHARGING */
void Statechart::exseq_SM_BAT_CHARGING()
{
	/* Default exit sequence for state BAT_CHARGING */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state SD_CHECK */
void Statechart::exseq_SM_SD_CHECK()
{
	/* Default exit sequence for state SD_CHECK */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state GPS_WAIT_POS_FIX */
void Statechart::exseq_SM_GPS_WAIT_POS_FIX()
{
	/* Default exit sequence for state GPS_WAIT_POS_FIX */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state SD_NONC0NNECT */
void Statechart::exseq_SM_SD_NONC0NNECT()
{
	/* Default exit sequence for state SD_NONC0NNECT */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state BAT_LOW */
void Statechart::exseq_SM_BAT_LOW()
{
	/* Default exit sequence for state BAT_LOW */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state BAT_CHECK */
void Statechart::exseq_SM_BAT_CHECK()
{
	/* Default exit sequence for state BAT_CHECK */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state SHUTDOWN */
void Statechart::exseq_SM_SHUTDOWN()
{
	/* Default exit sequence for state SHUTDOWN */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state GPS_NONFIX */
void Statechart::exseq_SM_GPS_NONFIX()
{
	/* Default exit sequence for state GPS_NONFIX */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for final state. */
void Statechart::exseq_SM__final_()
{
	/* Default exit sequence for final state. */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state ADQ_DATA */
void Statechart::exseq_SM_ADQ_DATA()
{
	/* Default exit sequence for state ADQ_DATA */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for state BAT_FULL */
void Statechart::exseq_SM_BAT_FULL()
{
	/* Default exit sequence for state BAT_FULL */
	stateConfVector[0] = Statechart_last_state;
}

/* Default exit sequence for region SM */
void Statechart::exseq_SM()
{
	/* Default exit sequence for region SM */
	/* Handle exit of all possible states (of Statechart.SM) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case SM_START :
		{
			exseq_SM_START();
			break;
		}
		case SM_BAT_CHARGING :
		{
			exseq_SM_BAT_CHARGING();
			break;
		}
		case SM_SD_CHECK :
		{
			exseq_SM_SD_CHECK();
			break;
		}
		case SM_GPS_WAIT_POS_FIX :
		{
			exseq_SM_GPS_WAIT_POS_FIX();
			break;
		}
		case SM_SD_NONC0NNECT :
		{
			exseq_SM_SD_NONC0NNECT();
			break;
		}
		case SM_BAT_LOW :
		{
			exseq_SM_BAT_LOW();
			break;
		}
		case SM_BAT_CHECK :
		{
			exseq_SM_BAT_CHECK();
			break;
		}
		case SM_SHUTDOWN :
		{
			exseq_SM_SHUTDOWN();
			break;
		}
		case SM_GPS_NONFIX :
		{
			exseq_SM_GPS_NONFIX();
			break;
		}
		case SM__final_ :
		{
			exseq_SM__final_();
			break;
		}
		case SM_ADQ_DATA :
		{
			exseq_SM_ADQ_DATA();
			break;
		}
		case SM_BAT_FULL :
		{
			exseq_SM_BAT_FULL();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void Statechart::react_SM__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_SM_START_default();
}

sc_integer Statechart::react(const sc_integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc_integer Statechart::SM_START_react(const sc_integer transitioned_before) {
	/* The reactions of state START. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (USB5V_connected_raised)
		{ 
			exseq_SM_START();
			enseq_SM_BAT_CHARGING_default();
			react(0);
			transitioned_after = 0;
		}  else
		{
			if (USB5V_NONconnected_raised)
			{ 
				exseq_SM_START();
				enseq_SM_BAT_CHECK_default();
				react(0);
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_BAT_CHARGING_react(const sc_integer transitioned_before) {
	/* The reactions of state BAT_CHARGING. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (battery_charge_completed_raised)
		{ 
			exseq_SM_BAT_CHARGING();
			enseq_SM_BAT_FULL_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_SD_CHECK_react(const sc_integer transitioned_before) {
	/* The reactions of state SD_CHECK. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (sd_check_ok_raised)
		{ 
			exseq_SM_SD_CHECK();
			enseq_SM_GPS_WAIT_POS_FIX_default();
			react(0);
			transitioned_after = 0;
		}  else
		{
			if (sd_check_NOTok_raised)
			{ 
				exseq_SM_SD_CHECK();
				enseq_SM_SD_NONC0NNECT_default();
				react(0);
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_GPS_WAIT_POS_FIX_react(const sc_integer transitioned_before) {
	/* The reactions of state GPS_WAIT_POS_FIX. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (gps_fixed_timeout_raised)
		{ 
			exseq_SM_GPS_WAIT_POS_FIX();
			enseq_SM_GPS_NONFIX_default();
			react(0);
			transitioned_after = 0;
		}  else
		{
			if (gps_fixed_ok_raised)
			{ 
				exseq_SM_GPS_WAIT_POS_FIX();
				enseq_SM_ADQ_DATA_default();
				react(0);
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_SD_NONC0NNECT_react(const sc_integer transitioned_before) {
	/* The reactions of state SD_NONC0NNECT. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (battery_level_critical_raised)
		{ 
			exseq_SM_SD_NONC0NNECT();
			enseq_SM_SHUTDOWN_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_BAT_LOW_react(const sc_integer transitioned_before) {
	/* The reactions of state BAT_LOW. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (battery_level_critical_raised)
		{ 
			exseq_SM_BAT_LOW();
			enseq_SM_SHUTDOWN_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_BAT_CHECK_react(const sc_integer transitioned_before) {
	/* The reactions of state BAT_CHECK. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (battery_level_ok_raised)
		{ 
			exseq_SM_BAT_CHECK();
			enseq_SM_SD_CHECK_default();
			react(0);
			transitioned_after = 0;
		}  else
		{
			if (battery_level_low_raised)
			{ 
				exseq_SM_BAT_CHECK();
				enseq_SM_BAT_LOW_default();
				react(0);
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_SHUTDOWN_react(const sc_integer transitioned_before) {
	/* The reactions of state SHUTDOWN. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (end_system_raised)
		{ 
			exseq_SM_SHUTDOWN();
			enseq_SM__final__default();
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_GPS_NONFIX_react(const sc_integer transitioned_before) {
	/* The reactions of state GPS_NONFIX. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (battery_level_critical_raised)
		{ 
			exseq_SM_GPS_NONFIX();
			enseq_SM_SHUTDOWN_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM__final__react(const sc_integer transitioned_before) {
	/* The reactions of state null. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_ADQ_DATA_react(const sc_integer transitioned_before) {
	/* The reactions of state ADQ_DATA. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (battery_level_low_raised)
		{ 
			exseq_SM_ADQ_DATA();
			enseq_SM_BAT_LOW_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer Statechart::SM_BAT_FULL_react(const sc_integer transitioned_before) {
	/* The reactions of state BAT_FULL. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

void Statechart::clearInEvents() {
	battery_charge_completed_raised = false;
	USB5V_connected_raised = false;
	USB5V_NONconnected_raised = false;
	battery_level_raised = false;
	battery_level_ok_raised = false;
	battery_level_low_raised = false;
	battery_level_critical_raised = false;
	sd_check_ok_raised = false;
	sd_check_NOTok_raised = false;
	gps_fixed_ok_raised = false;
	gps_fixed_timeout_raised = false;
	end_system_raised = false;
	adq_check_battery_raised = false;
}

void Statechart::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case SM_START :
		{
			SM_START_react(-1);
			break;
		}
		case SM_BAT_CHARGING :
		{
			SM_BAT_CHARGING_react(-1);
			break;
		}
		case SM_SD_CHECK :
		{
			SM_SD_CHECK_react(-1);
			break;
		}
		case SM_GPS_WAIT_POS_FIX :
		{
			SM_GPS_WAIT_POS_FIX_react(-1);
			break;
		}
		case SM_SD_NONC0NNECT :
		{
			SM_SD_NONC0NNECT_react(-1);
			break;
		}
		case SM_BAT_LOW :
		{
			SM_BAT_LOW_react(-1);
			break;
		}
		case SM_BAT_CHECK :
		{
			SM_BAT_CHECK_react(-1);
			break;
		}
		case SM_SHUTDOWN :
		{
			SM_SHUTDOWN_react(-1);
			break;
		}
		case SM_GPS_NONFIX :
		{
			SM_GPS_NONFIX_react(-1);
			break;
		}
		case SM__final_ :
		{
			SM__final__react(-1);
			break;
		}
		case SM_ADQ_DATA :
		{
			SM_ADQ_DATA_react(-1);
			break;
		}
		case SM_BAT_FULL :
		{
			SM_BAT_FULL_react(-1);
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

void Statechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatch_event(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
		dispatch_event(getNextEvent());
	} while (((((((((((((battery_charge_completed_raised) || (USB5V_connected_raised)) || (USB5V_NONconnected_raised)) || (battery_level_raised)) || (battery_level_ok_raised)) || (battery_level_low_raised)) || (battery_level_critical_raised)) || (sd_check_ok_raised)) || (sd_check_NOTok_raised)) || (gps_fixed_ok_raised)) || (gps_fixed_timeout_raised)) || (end_system_raised)) || (adq_check_battery_raised));
	isExecuting = false;
}

void Statechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_SM_default();
	isExecuting = false;
}

void Statechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_SM();
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void Statechart::triggerWithoutEvent() {
	runCycle();
}

